Git (opens new window)

리누스 토발즈Linus Torvalds가 2005년에 2주 만에 만든 분산 버전 관리 시스템(DVCS)Distributed version control systems입니다. 수많은 회사에서 수많은 소스가 Git으로 관리되고 개발자라면 반드시 알아야 하는 기술 중 하나입니다.

​

​

Git의 특징

Git의 기본 기능은 이력 관리입니다. 

많은 프로그램이 Ctrl + Z (undo)와 Ctrl + Y (redo)를 제공하는데, Git은 전체 소스 파일을 대상으로 해당 기능을 제공하고, 협업에 필요한 다양한 기능을 가지고 있습니다.

​

용어 설명

Git에서 자주 사용하는 키워드

repository 또는 repo: 저장소 / Git으로 버전 관리하는 디렉토리를 의미

local repository: 로컬 저장소 / 작업자의 개발 환경(PC)에 설정된 Git 저장소

remote repository: 원격 저장소 / GitHub 등 외부 서버에 설정된 Git 저장소

commit: 커밋 / 특정 상태를 기록한 것, 즉 버전을 의미

branch: 브랜치 / 한국어로 번역하면 가지치기 또는 갈래라고 하는데 또 다른 작업공간을 의미

merge: 머지 / 한국어로 병합 또는 합치기라고 하는데 특정 브랜치에서 작업한 내용을 또 다른 브랜치에 적용하는 것을 의미​

​

​

# Branching and Merging

​

​


일반적으로 Ctrl + Z 기능은 너무 단순해서 하나의 작업 이력을 관리하긴 좋지만, A안, B안, C안 처럼 여러 가지 작업을 관리하기는 어렵습니다. Git은 브랜치branch기능을 제공하여 동시에 여러 작업을 진행하고 합치고 충돌을 해결할 수 있습니다.

많은 회사에서 새 기능을 만들거나 버그를 수정할 때 브랜치를 만들고 코드 리뷰 후 메인 브랜치에 머지merge하는 방식을 사용합니다.

#Small and Fast

Git은 초초 빠릅니다. C로 만들었고 분산 버전 관리 시스템이기 때문에 평소에 서버와 통신할 필요가 없고 대부분의 작업이 로컬에서 이루어집니다.

#Distributed

Git은 분산 버전 관리 시스템이고 로컬에 원격 저장소의 모든 데이터를 복제하기 때문에 사실상 개발자 수만큼 백업이 되어 있습니다. 필요하면 원격 저장소를 여러 개 만들 수 있고 다양한 작업방식을 도입할 수 있습니다. 진정한 분산 관리형 시스템입니다.

#Data Assurance

Git은 데이터 무결성을 보장합니다. 모든 파일과 커밋은 체크섬 검사를 하고, 특정 히스토리를 변경하면 해당 커밋 ID와 그 이후 모든 항목의 커밋 ID가 변경됩니다. 따라서 특정 커밋은 ID만 알면 변경되지 않았음을 확신할 수 있습니다. 너무 당연한 이야기 같지만 많은 버전 관리 시스템이 이러한 무결성을 제공하지 않습니다.

#Staging Area

다른 버전 관리 시스템과 달리, Git은 커밋 이전에 스테이징staging area 또는 인덱스index라 불리는 상태를 가집니다. 이 상태에서 커밋 내역을 검토하고 특정 파일만 먼저 커밋하고 일부 파일은 나중에 커밋할 수도 있습니다. 장점이자 Git을 복잡하게 하는 단점이기도..


#Free and Open Source

Git은 오픈 소스 라이선스인 GNU General Public License version 2.0  (opens new window)를 가지고 모든 사용자에게 무료로 제공됩니다.

​

​

#준비

​

1. github : 소스코드를 저장하는 클라우드 공간. 공유가능. 협업 가능.

- repository 생성하기


GitHub: Let’s build from here
GitHub is where over 100 million developers shape the future of software, together. Contribute to the open source community, manage your Git repositories, review code like a pro, track bugs and fea...

github.com

2. git 설치

- 소스코드를 로컬 컴퓨터와 gitHub의 Repositery 사이에 전송하는 역할을 함

 
Git
About The advantages of Git compared to other source control systems. Documentation Command reference pages, Pro Git book content, videos and other material. Downloads GUI clients and binary releases for all major platforms. Community Get involved! Bug reporting, mailing list, chat, development and ...

git-scm.com

3. 터미널 설정

- 시작 - Git Bash 클릭

- 환경설정하기

$ git config --global user.name  "사용자이름"             ex> "csKo"

   git config user.name

$ git config --global user.email  "사용자 이메일주소"    ex> "silla7@naver.com"

   git config user.email

$ git config --list  (환경설정 내용에서 name과 email 확인)

$ code . (vscode와 연결)

​

4. VS-Code에서  terminal - New terminal

$ git init (로컬 Git 저장소 생성 및 초기화)

$ git add . (전부다 staging Area(Index) 에 올림)

   git add index.jsp (index.jsp만 staging에 올림)

$ git status (현재 브랜치(main)와 커밋 상태, 작업 중인 파일의 상태 확인)

$ git commit -m "07101430csko commit"  (히스토리 생성, 인덱스에 추가된 변경 사항을 이력에 추가)

$ git remote add origin https://github.com/thebrains27/shrd01261.git  (로컬 Git 저장소를Repository와 연결)

$ git remote -v   (연결확인)

$ git push origin master    (GitHub의 master branch로 소스 코드를 보냄)

   GitHub 에서 새로고침으로 확인

$ 소스코드를 수정 한 후 

$ git add . 

$ git status

$ git commit -m "07101450csko commit"

$ git push origin master

새로고침으로 확인

(이전버전과 현재 버전 확인 가능) 